#ifndef INCLUDED_PAIR
#define INCLUDED_PAIR

#include <Common.h>
#include "utility"
#include "tuple"

namespace Utils
{
	struct piecewise_construct_t {};
	
	IFCPP17(inline) constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
	
	template <class T1, class T2>
	class pair
	{
		private:
		
		template <size_t n, size_t... s>
		struct __gen_indexes
		{
			typedef typename __gen_indexes<n-1, n, s...>::type type;
		};
		
		template <size_t... s>
		struct __gen_indexes<0, s...>
		{
			typedef index_sequence<0, s...> type;
		};
		
		template <class N, class T, class... Args>
		struct __constr_t;
		
		template <class T, class... Args, size_t... N>
		struct __constr_t<index_sequence<N...>, T, Args...>
		{
			constexpr static T Call(tuple<Args...>&& t)
			{
				return T(Utils::get<N>(t)...);
			}
		};
		
		template <class T, class... Args>
		constexpr static T __constr(tuple<Args...> t)
		{
			typedef typename __gen_indexes<sizeof...(Args)-1>::type indexes;
			return __constr_t<indexes, T, Args...>::Call(move(t));
		}
		
		template <class T>
		constexpr static T __constr(tuple<> t)
		{
			return T();
		}
		
		public:
		T1 first;
		T2 second;
		
		constexpr pair() : first(), second()
		{
			
		}
		
		constexpr pair(const pair&) = default;
		pair(pair&& p) : first(move(p.first)), second(move(p.second))
		{
			
		}
		
		template <class Arg1, class Arg2>
		pair(Arg1&& a1, Arg2&& a2) : first(forward<Arg1&&>(a1)), second(forward<Arg2&&>(a2))
		{}
		
		template <class U, class V>
		pair(const pair<U, V>& p) : first(p.first), second(p.second)
		{ }
		
		template <class U, class V>
		pair(pair<U, V>&& p) : first(forward<U&&>(move(p.first))), second(forward<V&&>(move(p.second)))
		{ }
		
		pair(const T1& f, const T2& s) : first(f), second(s)
		{
			
		}
		
		template <class... Args1, class... Args2>
		pair(piecewise_construct_t, tuple<Args1...> a, tuple<Args2...> b) : first(__constr<T1>(move(a))), second(__constr<T2>(move(b)))
		{
			
		}
		
		pair& operator=(const pair&);
		template <class U, class V>
		pair& operator=(const pair<U, V>&);
		pair& operator=(pair&&);
		template <class U, class V>
		pair& operator=(pair<U, V>&&);
		
	};
	
	
	template <class T>
	struct equal_to;
	
	template <class T1, class T2>
	struct equal_to<pair<T1, T2>>
	{
		equal_to<T1> left;
		equal_to<T2> right;
		
		bool operator()(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs)
		{
			return left(lhs.first, rhs.first) && right(lhs.second, rhs.second);
		}
	};
}

#endif