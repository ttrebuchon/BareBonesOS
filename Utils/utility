#ifndef INCLUDED_UTILITY
#define INCLUDED_UTILITY



namespace Utils
{
	
	// remove_cv
	template <class T>
	struct remove_cv
	{
		typedef T type;
	};
	
	template <class T>
	struct remove_cv<const T> : public remove_cv<T>
	{};
	
	template <class T>
	struct remove_cv<volatile T> : public remove_cv<T>
	{ };
	
	
	
	
	// remove_ref
	template <class T>
	struct remove_ref
	{
		typedef T type;
	};
	
	template <class T>
	struct remove_ref<T&> : public remove_ref<T>
	{};
	
	template <class T>
	struct remove_ref<T&&> : public remove_ref<T>
	{ };
	
	template <class T>
	using remove_reference = remove_ref<T>;
	
	
	
	
	// add_rvalue_reference
	template <class T>
	struct add_rvalue_reference
	{
		typedef typename remove_ref<typename remove_cv<T>::type>::type&& type;
	};
	
	
	
	
	// declval()
	template <class T>
	typename add_rvalue_reference<T>::type declval();
	
	
	
	
	// move()
	template <class T>
	constexpr typename remove_reference<T>::type&& move(T&& t) noexcept
	{
		return static_cast<typename remove_reference<T>::type&&>(t);
	}
	
	
	
	
	// integer sequence
	template <class T, T... Ns>
	class integer_sequence
	{
		public:
		typedef T value_type;
		constexpr static size_t size() noexcept
		{
			return sizeof...(Ns);
		}
	};
	
	// index_sequence
	template <size_t... Ns>
	using index_sequence = integer_sequence<size_t, Ns...>;
	
}

#include "detail/forward.hh"
#include "void_t.hh"

#endif


#ifndef INCLUDED_SWAP_DEF
#define INCLUDED_SWAP_DEF
#include "detail/bits/is_constructible.hh"

namespace Utils
{
	template <class T>
	constexpr void swap(T& a, T& b)/* noexcept(is_nothrow_move_constructible<T>::value && is_nothrow_move_assignable<T>::value)*/
	{
		T tmp = move(a);
		a = move(b);
		b = move(tmp);
	}
}
#endif